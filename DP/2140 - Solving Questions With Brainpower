2140. Solving Questions With Brainpower

You are given a 0-indexed 2D integer array questions where questions[i] = [pointsi, brainpoweri].

The array describes the questions of an exam, where you have to process the questions in order (i.e., starting from question 0) and make a decision whether to solve or skip each question. Solving question i will earn you pointsi points but you will be unable to solve each of the next brainpoweri questions. If you skip question i, you get to make the decision on the next question.

For example, given questions = [[3, 2], [4, 3], [4, 4], [2, 5]]:
If question 0 is solved, you will earn 3 points but you will be unable to solve questions 1 and 2.
If instead, question 0 is skipped and question 1 is solved, you will earn 4 points but you will be unable to solve questions 2 and 3.
Return the maximum points you can earn for the exam.

__________________________________________________________________________________________________________________________________________________________________________________________________

Thoughts & Intuition: This is very obvious Dynamic Programming problem. We need to make a decision at each index that can impact our future so it is obvious. To a beginner you may think that it is impossible to check through
                      all the possibilities, but DP allows us to only look through the most promising ones. If you are unfamiliar with DP, go through some resource such as the LeetCode DP Explore card before reading further.

                      The type of DP we will use is bottom-up tabulation, meaning we will iterate from the end. We are doing this because decisions are much easier to make starting at the end. We either solve a question
                      and gain its points plus the points of the next element after performing the skips (dp[after_skips]), or we stick with the previously calculated value (dp[i+1]). If we tried calculating from the start,
                      then there would be a lot of overhead to go through and tabulate the values as we go forward, so much so that is becomes brute-force rather than DP.

                      As far as implementation, the first thing to do is to make a list of 0s that is of length n+1. We make it n+1 because according to our logic in the previous paragraphs, we want to compared the current
                      dp value to dp[i+1]. For the nth number, dp[i+1] does not exist and therefore should be 0. So to save us some code, we just make it n+1 long so that we can calculate the dp[nth] value. Of course we will
                      always end up taking that nth value because any positive number is greater than 0, but we may exclude this value going forward.

                      Now we know that dp[n+1] is 0, how can we calculate the dp[i+1] values for other indexes? For example, if we have 4 questions, then dp[2] will need dp[3] to already be calculated so that it can then
                      compare itself to dp[3] which will help it decide whether to skip itself and take the value of dp[3], or to take itself. The way we calculate dp[i] is that we obviously get the amount of points
                      from the current question which is questions[i][0], and then we add it with the dp value that we get if we skip the questions[i][1] questions after questions[i]. Luckily for us, since we decided to do
                      bottom-up DP, this value is already stored in dp[questions[i][1]+1]. NOTE the +1 as we are getting the value AFTER skipping. Now we do ofcourse need to make sure that the index questions[i][1]+1 is
                      actually valid in the questions array, or else we just nullify it and choose between questions[i][0] and dp[i+1] (skipping or not skipping).

                      So for every value i, the maximum score at that point is derived from one of the following two statements:

                        - If i+questions[i][1]+1 (the index to skip to) exists in questions, then: dp = max(questions[i] + dp[i+questions[i][1]+1], dp[i+1])    |    max(skip the next questions[i][1] Q's, or do not skip)
                              - This case means that the value to skip to does exist, so we calculate what the score would be if we added the current value with the value stored when we were at the index we are trying to
                                skip to. We compare this with the score if we totally skip the current index, which would be dp[i+1], and we just take the max as this must be the best choice.

                        - Else: dp = max(questions[i], dp[i+1]) | Max(taking just the current value, or skipping the current value and taking what we had before)
                              - This case means that the value to skip to is OOB (Out-Of-Bounds), so we pretty much compare the ith value with the ith+1 value in the dp list as taking i will skip the whole rest of the Q's.
                                So we just straight up compare them.

________________________________________________________________________________________________________________________________________________________________________________________________________

Dry Run:

                      To understand this problem, lets go through the example case. Given q = [[3, 2], [4, 3], [4, 4], [2, 5]], We start with a list dp of length n+1, so length 5. It is initialized to all 0s. 

                      The first thing we do it process the last pair ([2,5]). Either we take the current value and its skip value, or we take the next value in the dp list. In this case, we fall into the else statement
                      because after skipping 5 questions from index 3, we fall at index 9 (3+5+1), and obviously there is no 9th question. So we just compare the current value (2) to the value in dp[i+1] (0). Since 2>0,
                      the best decision is to take the 2, dp[3] is now 2.

                      Now process the next pair ([4,4] at index 2). Again this falls into the else case as index 7 (2+4+1) does not exist as there is no 8th question. Now we compare the current value which is 4, to the 
                      value in dp[i+1], which is dp[3], which as we said was 2. Since 4>2, taking the question at index 2 and skipping the question at index 3 is the best decision so far.

                      Now process the next pair ([4,3] at index 1). Again, this falls into the else case as index 5 (1+3+1) does not exist as there is no 6th question. Now we compare the current value which is 4 to the
                      value at dp[i+1], whiich is dp[2], which as we said is 4. Now 4==4, so dp[1] == 4. We have just decided that it makes no difference if we skip the question in index 1 and take index 2 or vice versa.
                      Since 4==4, either will give you the same result.

                      Now process the last pair ([3,2] at index 0). This falls into the if case because index 3 (0+2+1) does indeed exist as their is a 4th question. Now we must take the current value (which is 3),
                      and add it to dp[3]. Again remember, dp[3] stores the best possible score we can reach at index 3 (Q4), so now we can decide: is skipping the numbers between index 0 and index 3 (which is index 1 and 2)
                      worth it? or should we stick with taking the value from dp[i+1]. So the current value (3) + dp[3] is 3+2, which is 5. dp[i+1] as calculated in the above paragraph is 4. Since 5>4, we now know
                      that the best decision is to answer the question at index 0, skip index 1 and 2, and then answer question 3. However since we are only concerned with the max score, the value at dp[0] in bottom-up
                      tabulation will always hold the max, just return that.

__________________________________________________________________________________________________________________________________________________________________________________________________________

Code:

          class Solution:
              def mostPoints(self, questions: List[List[int]]) -> int:
                  # Create a bottom-up DP list
                  dp=[0] * (len(questions)+1)
          
                  # Start from the end and make decisions
                  for i in range(len(questions)-1, -1, -1):
                      # Assign the most optimal dp[i]... Should we skip from index i to the skip point, or should we just take the value reached so far and instead skip the current question?
                      dp[i] = max(questions[i][0]+dp[i+(questions[i][1])+1], dp[i+1]) if i+(questions[i][1])+1 < len(questions) else max(questions[i][0], dp[i+1])
                  
                  # dp[0] holds the best possible score
                  return dp[0]
