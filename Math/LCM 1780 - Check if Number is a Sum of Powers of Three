Given an integer n, return true if it is possible to represent n as the sum of distinct powers of three. Otherwise, return false.

An integer y is a power of three if there exists an integer x such that y == 3x.

Example 1:

Input: n = 12
Output: true
Explanation: 12 = 3^1 + 3^2

__________________________________________________________________________________________________________________________________________________________________________________________________

Intuition & Thoughts:     Off the bat, this is a math problem. You will quickly realize that there isn't really a data structure that can help us and that we will need to use some sort of looping to solve this. The
                          next thing to notice is that the form 3^1 + 3^2 looks similar to expanded binary form. For example, the decimal 10 can be represented by binary 1010 which equates to 2^3 + 2^1.

                          Now the key think to notice is that in binary, you either have 1, or 0. This means that for any 2^n, we either have it, or dont. In the example with decimal 10, we have only 2^3 and 2^1.
                          But if we switch to base-3 (ternary instead of binary), then instead of having just 0 and 1, we now have 0, 1, and 2.

                          The question says that we need to return true if we can represent the input as DISTINCT powers of 3. This means that our powers of 3 CANNOT have coefficients. Let's look at a false case:

                          For n=21, the ternary representation is 210 or 2(3^2) + 3^1. As you can see, a two is present as a coefficient, so we need to return false.

                          But how do we derive the ternary representation. If you took a digital logics class in college, you would know that we get get the binary form of a decimal by getting the remainder of
                          by 2, adding the remainder as the most significant bit, and then dividing. Loop until the input is set to 0.

                          For a decimal 10, this will look like so:
                          
                          10 / 2 = 5,  r=0
                          5 / 2  = 2,  r=1
                          2 / 2  = 1,  r=0
                          1 / 2  = 0,  r=1

                          As you can see, we go until the number is divided to 0, then when we combine the remainders, we get the proper binary representation of 10: 1010

                          Now with decimal 21, ternary conversion will look like so:

                          21 / 3 = 7,  r=0
                           7 / 3 = 2,  r=1
                           2 / 3 = 0,  r=2

                          As you can see, we get 210, the proper ternary conversion of decimal 21. Now you may already be seeing our approach. Whenever we divide, if we EVER see a quotient of 2, then we 
                          simply return False. If not, we keep dividing by 3 until we hit 0 and return True. This is the way to solve this. It is very mathematically, and probably one of the few cases where 
                          college actually helped me. As you can see, the code is super short and easy. The hard part is seeing this idea.

________________________________________________________________________________________________________________________________________________________________________________________________________________

Implementation:

                      class Solution:
                        def checkPowersOfThree(self, n: int) -> bool:
                            while n!=0:
                                if n%3 ==2:
                                    return False
                                n//=3
                            return True

        



                          
