You are given an integer array nums of length n and a 2D array queries, where queries[i] = [li, ri].

For each queries[i]:

Select a subset of indices within the range [li, ri] in nums.
Decrement the values at the selected indices by 1.
A Zero Array is an array where all elements are equal to 0.

Return true if it is possible to transform nums into a Zero Array after processing all the queries sequentially, otherwise return false.

Input: nums = [1,0,1,1], queries = [[1,3],[0,2]]

Output: true

Explanation:

For i = 0:
Select the subset of indices as [0, 2] and decrement the values at these indices by 1.
The array will become [0, 0, 0], which is a Zero Array.

_____________________________________________________________________________________________________________________________________________

Intuition and Thoughts:
Okay, so for this problem, we need to simplify the question statement we are given. They tell use we have a list of queries that apply on a nums array. Those 
queries decide a range (l, r) where we can decrement any subset (meaning whichever numbers we want) by 1. In the end, we want a zero array.

Now we need to understand that each individual number can be brought to zero if there are enough queries that cover its range. So if we have the number 5 at 
index 2, we will need 5 queries that include the index 2 in the range (l,r). Now what if we only need 5, but have 7? That's it, the whole idea is that it is
perfectly okay if we go over, because remember, we are CHOOSING subsets. All we need to make sure is that there are enough (>=) queries to take each number in the
nums array down to 0.

Now a naive idea would be to just loop through the queries, apply the changes to nums, and then check if we have a zero/negative array at the end. This works, but
it is inefficient. What if we had to span (1,10) 100 times, that is 10000 operations, and it could get much much worse than that, so we need a better way.

This is where we can use the difference array. It is pretty obvious if you are experienced. But whenever we need to apply queries over a range of items and the
queries overlap, rather than applying them one-by-one, we can apply them to a difference array, combine them together, and THEN apply them to the nums array. This
way if we have to span (1,10) 100 times, we only need 100 operations (apply the changes to the difference array for each of the 100 ranges). So lets look at it.

Given the example above, we first create a list of length n+1, so for nums = [1,0,1,1] the difference_arr = [0,0,0,0,0]. Next we apply the queries [1,3] and [0,2].
The idea here is not to loop over the queries, because remember, we want to avoid those extra operations. Rather, we will just note when we need to increment and
decrement. In our case, we process the query [1,3] first. This means we increment at index 1, and decrement at index 4. Our difference_arr = [0, 1, 0, 0, -1].
Then we process [0,2]. Our difference array becomes [1, 1, 0, -1, -1]

Okay, now understand that that n+1th element in the difference array is irrelevent, it is just so we do not run into any index issues. In reality, we are only
working with [1, 1, 0, -1]. So what does this mean? This tells us where the increments and decrements occur, but not how many each index gets, we can loop over
it to apply the values with a rolling variable.

Starting from roll=0, simply add each index i to roll, and set that index to the current roll. This yields [1, 2, 2, 1]. So now for the queries [0,2] and [1,3],
we can see how many times each index can be decremented. It may seem simple with a small test case, but this handles large test cases really well.

Finally, we simply compare these difference_arr values to the corresponding nums value to ensure that the difference_arr value is >= to it. We can infact just
include this in our difference_arr rolling loop at the end of the roll addition to save ourselves a loop making our code quicker.

______________________________________________________________________________________________________________________________________________

Time & Space Complexity: 

Time wise, this is an O(q+n) operation where q is the amount of queries and n is the amount of numbers in the nums array. This is because we must
process each query and apply it to the nums array, and then we need to loop over that difference array to compare it to the nums array.

Space wise, we require O(n) space where n is the amount of number in the nums array as we need space for the difference array.
______________________________________________________________________________________________________________________________________________
Code: 

class Solution:
    def isZeroArray(self, nums: List[int], queries: List[List[int]]) -> bool:
        # Build a difference array of length n+1
        diff_arr = [0] * (len(nums)+1)

        # Loop through and apply the queries
        for i in range(len(queries)):

            # Start Query (l index)
            diff_arr[queries[i][0]] += 1

            # End Query (One after the r index)
            diff_arr[queries[i][1]+1] -=1

        # Roll through the queries
        roll=0
        for i in range(len(arr)-1):

            # Check difference_arr to increment/decrement
            roll+=arr[i]

            # Save total increment to diff_arr[i]
            diff_arr[i]=roll
            
            # Ensure that the diff_arr is >= nums[i], if not return False
            if nums[i] > diff_arr[i]:
                return False

        # If all diff_arr[i] >= nums[i], return True
        return True

