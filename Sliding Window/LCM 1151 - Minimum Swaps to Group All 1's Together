
Given a binary array data, return the minimum number of swaps required to group all 1â€™s present in the array together in any place in the array.

__________________________________________________________________________________________________________________________________________________________________________________________________________

Intuition & Thoughts:   First of all, if you ever see a string of ones and zeroes, and the problem has anything to do with moving, deleting, adding or in some way permuting the array, then there is a good chance
                        that they are making it seem like a brute-force O(n^2) / O(n^3) problem, but in reality, it is O(n) with a sliding window. This pattern is super common, get used to it.

                        But how can we use a sliding window to find how many ones we need to swap? Well the idea is that we are given a binary array, so let's say we had an array [1, 0, 0, 1, 1].

                        Now if we are given the subarray [1, 0, 0] and we know that there are 3 ones total, it is clear that the number of zeroes in the subarray (2) is how many swaps we need. This is the key to the
                        problem.

                        Now for one oversight, how do we know what SIZE subarray to check for? Well, the size of a subarray with all ones will be equal to arr.count(1) which is the count of ones in the array. So
                        the size of our sliding window is equal to the number of ones present in the array.

                        So to put the idea together, we need to find the MINIMUM amount of zeroes in a subarray of size arr.count(1). So for [1, 0, 1, 0, 1, 1, 0], we are checking windows of size 4 and counting
                        zeroes. You will realize that window of size 4 arr[2:6], which is [1, 0, 1, 1], results in the least possible zeroes.

                        Epic.

__________________________________________________________________________________________________________________________________________________________________________________________________________________

Implementation:

class Solution:
    def minSwaps(self, data: List[int]) -> int:
        # Min number of zeros within a window of size numOnes will be the minimum number of swaps

        # Get 1 count
        numOnes = data.count(1)

        # Counters
        l,r =0,numOnes-1

        # Fill size numOnes sliding window
        zeroes = sum(1 for i in range(numOnes) if data[i] == 0)
        minZeroes = zeroes

        # Loop
        while r<len(data)-1:
            # Move right pointer up
            r+=1
            if data[r] == 0:
                zeroes+=1
            
            # Move left pointer up
            if data[l] == 0:
                zeroes-=1
            l+=1

            # See if new minimum
            minZeroes = min(zeroes, minZeroes)

        return minZeroes



        
        
